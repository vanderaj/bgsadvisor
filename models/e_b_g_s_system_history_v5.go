// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EBGSSystemHistoryV5 e b g s system history v5
//
// swagger:model EBGSSystemHistoryV5
type EBGSSystemHistoryV5 struct {

	// id
	ID string `json:"_id,omitempty"`

	// allegiance
	Allegiance string `json:"allegiance,omitempty"`

	// conflicts
	Conflicts []*EBGSConflictSystemV5 `json:"conflicts"`

	// controlling minor faction
	ControllingMinorFaction string `json:"controlling_minor_faction,omitempty"`

	// controlling minor faction cased
	ControllingMinorFactionCased string `json:"controlling_minor_faction_cased,omitempty"`

	// controlling minor faction id
	ControllingMinorFactionID string `json:"controlling_minor_faction_id,omitempty"`

	// factions
	Factions []*EBGSFactionRefV5 `json:"factions"`

	// government
	Government string `json:"government,omitempty"`

	// population
	Population int64 `json:"population,omitempty"`

	// security
	Security string `json:"security,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// updated by
	UpdatedBy string `json:"updated_by,omitempty"`
}

// Validate validates this e b g s system history v5
func (m *EBGSSystemHistoryV5) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConflicts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFactions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EBGSSystemHistoryV5) validateConflicts(formats strfmt.Registry) error {
	if swag.IsZero(m.Conflicts) { // not required
		return nil
	}

	for i := 0; i < len(m.Conflicts); i++ {
		if swag.IsZero(m.Conflicts[i]) { // not required
			continue
		}

		if m.Conflicts[i] != nil {
			if err := m.Conflicts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conflicts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EBGSSystemHistoryV5) validateFactions(formats strfmt.Registry) error {
	if swag.IsZero(m.Factions) { // not required
		return nil
	}

	for i := 0; i < len(m.Factions); i++ {
		if swag.IsZero(m.Factions[i]) { // not required
			continue
		}

		if m.Factions[i] != nil {
			if err := m.Factions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("factions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this e b g s system history v5 based on the context it is used
func (m *EBGSSystemHistoryV5) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConflicts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFactions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EBGSSystemHistoryV5) contextValidateConflicts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Conflicts); i++ {

		if m.Conflicts[i] != nil {
			if err := m.Conflicts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conflicts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EBGSSystemHistoryV5) contextValidateFactions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Factions); i++ {

		if m.Factions[i] != nil {
			if err := m.Factions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("factions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EBGSSystemHistoryV5) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EBGSSystemHistoryV5) UnmarshalBinary(b []byte) error {
	var res EBGSSystemHistoryV5
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
