// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EBGSFactionsV5 e b g s factions v5
//
// swagger:model EBGSFactionsV5
type EBGSFactionsV5 struct {

	// v
	V int64 `json:"__v,omitempty"`

	// id
	ID string `json:"_id,omitempty"`

	// allegiance
	Allegiance string `json:"allegiance,omitempty"`

	// eddb id
	EddbID int64 `json:"eddb_id,omitempty"`

	// faction presence
	FactionPresence []*EBGSFactionPresenceV5 `json:"faction_presence"`

	// government
	Government string `json:"government,omitempty"`

	// history
	History []*EBGSFactionHistoryV5 `json:"history"`

	// home system name
	HomeSystemName string `json:"home_system_name,omitempty"`

	// is player faction
	IsPlayerFaction bool `json:"is_player_faction,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// name lower
	NameLower string `json:"name_lower,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this e b g s factions v5
func (m *EBGSFactionsV5) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFactionPresence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHistory(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EBGSFactionsV5) validateFactionPresence(formats strfmt.Registry) error {
	if swag.IsZero(m.FactionPresence) { // not required
		return nil
	}

	for i := 0; i < len(m.FactionPresence); i++ {
		if swag.IsZero(m.FactionPresence[i]) { // not required
			continue
		}

		if m.FactionPresence[i] != nil {
			if err := m.FactionPresence[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("faction_presence" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EBGSFactionsV5) validateHistory(formats strfmt.Registry) error {
	if swag.IsZero(m.History) { // not required
		return nil
	}

	for i := 0; i < len(m.History); i++ {
		if swag.IsZero(m.History[i]) { // not required
			continue
		}

		if m.History[i] != nil {
			if err := m.History[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("history" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this e b g s factions v5 based on the context it is used
func (m *EBGSFactionsV5) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFactionPresence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHistory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EBGSFactionsV5) contextValidateFactionPresence(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FactionPresence); i++ {

		if m.FactionPresence[i] != nil {
			if err := m.FactionPresence[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("faction_presence" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EBGSFactionsV5) contextValidateHistory(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.History); i++ {

		if m.History[i] != nil {
			if err := m.History[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("history" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EBGSFactionsV5) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EBGSFactionsV5) UnmarshalBinary(b []byte) error {
	var res EBGSFactionsV5
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
