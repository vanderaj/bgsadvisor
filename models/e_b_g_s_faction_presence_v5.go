// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EBGSFactionPresenceV5 e b g s faction presence v5
//
// swagger:model EBGSFactionPresenceV5
type EBGSFactionPresenceV5 struct {

	// active states
	ActiveStates []*EBGSStateActiveV5 `json:"active_states"`

	// conflicts
	Conflicts []*EBGSConflictFactionV5 `json:"conflicts"`

	// happiness
	Happiness string `json:"happiness,omitempty"`

	// influence
	Influence float64 `json:"influence,omitempty"`

	// pending states
	PendingStates []*EBGSStateV5 `json:"pending_states"`

	// recovering states
	RecoveringStates []*EBGSStateV5 `json:"recovering_states"`

	// state
	State string `json:"state,omitempty"`

	// system details
	SystemDetails *EBGSSystemsV5 `json:"system_details,omitempty"`

	// system id
	SystemID string `json:"system_id,omitempty"`

	// system name
	SystemName string `json:"system_name,omitempty"`

	// system name lower
	SystemNameLower string `json:"system_name_lower,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this e b g s faction presence v5
func (m *EBGSFactionPresenceV5) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveStates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConflicts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePendingStates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoveringStates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EBGSFactionPresenceV5) validateActiveStates(formats strfmt.Registry) error {
	if swag.IsZero(m.ActiveStates) { // not required
		return nil
	}

	for i := 0; i < len(m.ActiveStates); i++ {
		if swag.IsZero(m.ActiveStates[i]) { // not required
			continue
		}

		if m.ActiveStates[i] != nil {
			if err := m.ActiveStates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("active_states" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EBGSFactionPresenceV5) validateConflicts(formats strfmt.Registry) error {
	if swag.IsZero(m.Conflicts) { // not required
		return nil
	}

	for i := 0; i < len(m.Conflicts); i++ {
		if swag.IsZero(m.Conflicts[i]) { // not required
			continue
		}

		if m.Conflicts[i] != nil {
			if err := m.Conflicts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conflicts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EBGSFactionPresenceV5) validatePendingStates(formats strfmt.Registry) error {
	if swag.IsZero(m.PendingStates) { // not required
		return nil
	}

	for i := 0; i < len(m.PendingStates); i++ {
		if swag.IsZero(m.PendingStates[i]) { // not required
			continue
		}

		if m.PendingStates[i] != nil {
			if err := m.PendingStates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pending_states" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EBGSFactionPresenceV5) validateRecoveringStates(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoveringStates) { // not required
		return nil
	}

	for i := 0; i < len(m.RecoveringStates); i++ {
		if swag.IsZero(m.RecoveringStates[i]) { // not required
			continue
		}

		if m.RecoveringStates[i] != nil {
			if err := m.RecoveringStates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("recovering_states" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EBGSFactionPresenceV5) validateSystemDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.SystemDetails) { // not required
		return nil
	}

	if m.SystemDetails != nil {
		if err := m.SystemDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("system_details")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this e b g s faction presence v5 based on the context it is used
func (m *EBGSFactionPresenceV5) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActiveStates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConflicts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePendingStates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoveringStates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSystemDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EBGSFactionPresenceV5) contextValidateActiveStates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ActiveStates); i++ {

		if m.ActiveStates[i] != nil {
			if err := m.ActiveStates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("active_states" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EBGSFactionPresenceV5) contextValidateConflicts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Conflicts); i++ {

		if m.Conflicts[i] != nil {
			if err := m.Conflicts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conflicts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EBGSFactionPresenceV5) contextValidatePendingStates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PendingStates); i++ {

		if m.PendingStates[i] != nil {
			if err := m.PendingStates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pending_states" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EBGSFactionPresenceV5) contextValidateRecoveringStates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RecoveringStates); i++ {

		if m.RecoveringStates[i] != nil {
			if err := m.RecoveringStates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("recovering_states" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EBGSFactionPresenceV5) contextValidateSystemDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.SystemDetails != nil {
		if err := m.SystemDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("system_details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EBGSFactionPresenceV5) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EBGSFactionPresenceV5) UnmarshalBinary(b []byte) error {
	var res EBGSFactionPresenceV5
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
