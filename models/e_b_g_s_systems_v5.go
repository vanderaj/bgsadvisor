// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EBGSSystemsV5 e b g s systems v5
//
// swagger:model EBGSSystemsV5
type EBGSSystemsV5 struct {

	// v
	V int64 `json:"__v,omitempty"`

	// id
	ID string `json:"_id,omitempty"`

	// allegiance
	Allegiance string `json:"allegiance,omitempty"`

	// conflicts
	Conflicts []*EBGSConflictSystemV5 `json:"conflicts"`

	// controlling minor faction
	ControllingMinorFaction string `json:"controlling_minor_faction,omitempty"`

	// controlling minor faction cased
	ControllingMinorFactionCased string `json:"controlling_minor_faction_cased,omitempty"`

	// controlling minor faction id
	ControllingMinorFactionID string `json:"controlling_minor_faction_id,omitempty"`

	// eddb id
	EddbID int64 `json:"eddb_id,omitempty"`

	// faction history
	FactionHistory []*EBGSFactionHistorySystemV5 `json:"faction_history"`

	// factions
	Factions []*EBGSFactionRefV5 `json:"factions"`

	// government
	Government string `json:"government,omitempty"`

	// history
	History []*EBGSSystemHistoryV5 `json:"history"`

	// name
	Name string `json:"name,omitempty"`

	// name aliases
	NameAliases []*EBGSNameAliasV5 `json:"name_aliases"`

	// name lower
	NameLower string `json:"name_lower,omitempty"`

	// needs permit
	NeedsPermit bool `json:"needs_permit,omitempty"`

	// population
	Population int64 `json:"population,omitempty"`

	// primary economy
	PrimaryEconomy string `json:"primary_economy,omitempty"`

	// reserve type
	ReserveType string `json:"reserve_type,omitempty"`

	// secondary economy
	SecondaryEconomy string `json:"secondary_economy,omitempty"`

	// security
	Security string `json:"security,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// system address
	SystemAddress string `json:"system_address,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// x
	X float64 `json:"x,omitempty"`

	// y
	Y float64 `json:"y,omitempty"`

	// z
	Z float64 `json:"z,omitempty"`
}

// Validate validates this e b g s systems v5
func (m *EBGSSystemsV5) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConflicts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFactionHistory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFactions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHistory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameAliases(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EBGSSystemsV5) validateConflicts(formats strfmt.Registry) error {
	if swag.IsZero(m.Conflicts) { // not required
		return nil
	}

	for i := 0; i < len(m.Conflicts); i++ {
		if swag.IsZero(m.Conflicts[i]) { // not required
			continue
		}

		if m.Conflicts[i] != nil {
			if err := m.Conflicts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conflicts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EBGSSystemsV5) validateFactionHistory(formats strfmt.Registry) error {
	if swag.IsZero(m.FactionHistory) { // not required
		return nil
	}

	for i := 0; i < len(m.FactionHistory); i++ {
		if swag.IsZero(m.FactionHistory[i]) { // not required
			continue
		}

		if m.FactionHistory[i] != nil {
			if err := m.FactionHistory[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("faction_history" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EBGSSystemsV5) validateFactions(formats strfmt.Registry) error {
	if swag.IsZero(m.Factions) { // not required
		return nil
	}

	for i := 0; i < len(m.Factions); i++ {
		if swag.IsZero(m.Factions[i]) { // not required
			continue
		}

		if m.Factions[i] != nil {
			if err := m.Factions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("factions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EBGSSystemsV5) validateHistory(formats strfmt.Registry) error {
	if swag.IsZero(m.History) { // not required
		return nil
	}

	for i := 0; i < len(m.History); i++ {
		if swag.IsZero(m.History[i]) { // not required
			continue
		}

		if m.History[i] != nil {
			if err := m.History[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("history" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EBGSSystemsV5) validateNameAliases(formats strfmt.Registry) error {
	if swag.IsZero(m.NameAliases) { // not required
		return nil
	}

	for i := 0; i < len(m.NameAliases); i++ {
		if swag.IsZero(m.NameAliases[i]) { // not required
			continue
		}

		if m.NameAliases[i] != nil {
			if err := m.NameAliases[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("name_aliases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this e b g s systems v5 based on the context it is used
func (m *EBGSSystemsV5) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConflicts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFactionHistory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFactions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHistory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNameAliases(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EBGSSystemsV5) contextValidateConflicts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Conflicts); i++ {

		if m.Conflicts[i] != nil {
			if err := m.Conflicts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conflicts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EBGSSystemsV5) contextValidateFactionHistory(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FactionHistory); i++ {

		if m.FactionHistory[i] != nil {
			if err := m.FactionHistory[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("faction_history" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EBGSSystemsV5) contextValidateFactions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Factions); i++ {

		if m.Factions[i] != nil {
			if err := m.Factions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("factions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EBGSSystemsV5) contextValidateHistory(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.History); i++ {

		if m.History[i] != nil {
			if err := m.History[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("history" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EBGSSystemsV5) contextValidateNameAliases(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NameAliases); i++ {

		if m.NameAliases[i] != nil {
			if err := m.NameAliases[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("name_aliases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EBGSSystemsV5) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EBGSSystemsV5) UnmarshalBinary(b []byte) error {
	var res EBGSSystemsV5
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
