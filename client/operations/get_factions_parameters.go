// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetFactionsParams creates a new GetFactionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetFactionsParams() *GetFactionsParams {
	return &GetFactionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetFactionsParamsWithTimeout creates a new GetFactionsParams object
// with the ability to set a timeout on a request.
func NewGetFactionsParamsWithTimeout(timeout time.Duration) *GetFactionsParams {
	return &GetFactionsParams{
		timeout: timeout,
	}
}

// NewGetFactionsParamsWithContext creates a new GetFactionsParams object
// with the ability to set a context for a request.
func NewGetFactionsParamsWithContext(ctx context.Context) *GetFactionsParams {
	return &GetFactionsParams{
		Context: ctx,
	}
}

// NewGetFactionsParamsWithHTTPClient creates a new GetFactionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetFactionsParamsWithHTTPClient(client *http.Client) *GetFactionsParams {
	return &GetFactionsParams{
		HTTPClient: client,
	}
}

/* GetFactionsParams contains all the parameters to send to the API endpoint
   for the get factions operation.

   Typically these are written to a http.Request.
*/
type GetFactionsParams struct {

	/* ActiveState.

	   Name of the active state of the faction.
	*/
	ActiveState *string

	/* Allegiance.

	   Name of the allegiance.
	*/
	Allegiance *string

	/* BeginsWith.

	   Starting characters of the faction.
	*/
	BeginsWith *string

	/* Count.

	   Number of history records per system presence. Disables timeMin and timeMax
	*/
	Count *string

	/* EddbID.

	   EDDB ID of the faction.
	*/
	EddbID *string

	/* FilterSystemInHistory.

	   Apply the system filter in the history too.
	*/
	FilterSystemInHistory *bool

	/* Government.

	   Name of the government type.
	*/
	Government *string

	/* ID.

	   ID of the document.
	*/
	ID *string

	/* InfluenceGT.

	   Factions with influence greater than. Must be between 0 and 1.
	*/
	InfluenceGT *string

	/* InfluenceLT.

	   Factions with influence lesser than. Must be between 0 and 1.
	*/
	InfluenceLT *string

	/* Minimal.

	   Get minimal data of the faction.
	*/
	Minimal *bool

	/* Name.

	   Faction name.
	*/
	Name *string

	/* Page.

	   Page no of response.
	*/
	Page *int64

	/* PendingState.

	   Name of the pending state of the faction.
	*/
	PendingState *string

	/* RecoveringState.

	   Name of the recovering state of the faction.
	*/
	RecoveringState *string

	/* System.

	   Filter by system.
	*/
	System *string

	/* SystemDetails.

	   Get the detailed system data the faction currently is in.
	*/
	SystemDetails *bool

	/* SystemID.

	   Filter by system id.
	*/
	SystemID *string

	/* TimeMax.

	   Maximum time for the faction history in milliseconds.
	*/
	TimeMax *string

	/* TimeMin.

	   Minimum time for the faction history in milliseconds.
	*/
	TimeMin *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get factions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFactionsParams) WithDefaults() *GetFactionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get factions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFactionsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get factions params
func (o *GetFactionsParams) WithTimeout(timeout time.Duration) *GetFactionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get factions params
func (o *GetFactionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get factions params
func (o *GetFactionsParams) WithContext(ctx context.Context) *GetFactionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get factions params
func (o *GetFactionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get factions params
func (o *GetFactionsParams) WithHTTPClient(client *http.Client) *GetFactionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get factions params
func (o *GetFactionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActiveState adds the activeState to the get factions params
func (o *GetFactionsParams) WithActiveState(activeState *string) *GetFactionsParams {
	o.SetActiveState(activeState)
	return o
}

// SetActiveState adds the activeState to the get factions params
func (o *GetFactionsParams) SetActiveState(activeState *string) {
	o.ActiveState = activeState
}

// WithAllegiance adds the allegiance to the get factions params
func (o *GetFactionsParams) WithAllegiance(allegiance *string) *GetFactionsParams {
	o.SetAllegiance(allegiance)
	return o
}

// SetAllegiance adds the allegiance to the get factions params
func (o *GetFactionsParams) SetAllegiance(allegiance *string) {
	o.Allegiance = allegiance
}

// WithBeginsWith adds the beginsWith to the get factions params
func (o *GetFactionsParams) WithBeginsWith(beginsWith *string) *GetFactionsParams {
	o.SetBeginsWith(beginsWith)
	return o
}

// SetBeginsWith adds the beginsWith to the get factions params
func (o *GetFactionsParams) SetBeginsWith(beginsWith *string) {
	o.BeginsWith = beginsWith
}

// WithCount adds the count to the get factions params
func (o *GetFactionsParams) WithCount(count *string) *GetFactionsParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get factions params
func (o *GetFactionsParams) SetCount(count *string) {
	o.Count = count
}

// WithEddbID adds the eddbID to the get factions params
func (o *GetFactionsParams) WithEddbID(eddbID *string) *GetFactionsParams {
	o.SetEddbID(eddbID)
	return o
}

// SetEddbID adds the eddbId to the get factions params
func (o *GetFactionsParams) SetEddbID(eddbID *string) {
	o.EddbID = eddbID
}

// WithFilterSystemInHistory adds the filterSystemInHistory to the get factions params
func (o *GetFactionsParams) WithFilterSystemInHistory(filterSystemInHistory *bool) *GetFactionsParams {
	o.SetFilterSystemInHistory(filterSystemInHistory)
	return o
}

// SetFilterSystemInHistory adds the filterSystemInHistory to the get factions params
func (o *GetFactionsParams) SetFilterSystemInHistory(filterSystemInHistory *bool) {
	o.FilterSystemInHistory = filterSystemInHistory
}

// WithGovernment adds the government to the get factions params
func (o *GetFactionsParams) WithGovernment(government *string) *GetFactionsParams {
	o.SetGovernment(government)
	return o
}

// SetGovernment adds the government to the get factions params
func (o *GetFactionsParams) SetGovernment(government *string) {
	o.Government = government
}

// WithID adds the id to the get factions params
func (o *GetFactionsParams) WithID(id *string) *GetFactionsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get factions params
func (o *GetFactionsParams) SetID(id *string) {
	o.ID = id
}

// WithInfluenceGT adds the influenceGT to the get factions params
func (o *GetFactionsParams) WithInfluenceGT(influenceGT *string) *GetFactionsParams {
	o.SetInfluenceGT(influenceGT)
	return o
}

// SetInfluenceGT adds the influenceGT to the get factions params
func (o *GetFactionsParams) SetInfluenceGT(influenceGT *string) {
	o.InfluenceGT = influenceGT
}

// WithInfluenceLT adds the influenceLT to the get factions params
func (o *GetFactionsParams) WithInfluenceLT(influenceLT *string) *GetFactionsParams {
	o.SetInfluenceLT(influenceLT)
	return o
}

// SetInfluenceLT adds the influenceLT to the get factions params
func (o *GetFactionsParams) SetInfluenceLT(influenceLT *string) {
	o.InfluenceLT = influenceLT
}

// WithMinimal adds the minimal to the get factions params
func (o *GetFactionsParams) WithMinimal(minimal *bool) *GetFactionsParams {
	o.SetMinimal(minimal)
	return o
}

// SetMinimal adds the minimal to the get factions params
func (o *GetFactionsParams) SetMinimal(minimal *bool) {
	o.Minimal = minimal
}

// WithName adds the name to the get factions params
func (o *GetFactionsParams) WithName(name *string) *GetFactionsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get factions params
func (o *GetFactionsParams) SetName(name *string) {
	o.Name = name
}

// WithPage adds the page to the get factions params
func (o *GetFactionsParams) WithPage(page *int64) *GetFactionsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get factions params
func (o *GetFactionsParams) SetPage(page *int64) {
	o.Page = page
}

// WithPendingState adds the pendingState to the get factions params
func (o *GetFactionsParams) WithPendingState(pendingState *string) *GetFactionsParams {
	o.SetPendingState(pendingState)
	return o
}

// SetPendingState adds the pendingState to the get factions params
func (o *GetFactionsParams) SetPendingState(pendingState *string) {
	o.PendingState = pendingState
}

// WithRecoveringState adds the recoveringState to the get factions params
func (o *GetFactionsParams) WithRecoveringState(recoveringState *string) *GetFactionsParams {
	o.SetRecoveringState(recoveringState)
	return o
}

// SetRecoveringState adds the recoveringState to the get factions params
func (o *GetFactionsParams) SetRecoveringState(recoveringState *string) {
	o.RecoveringState = recoveringState
}

// WithSystem adds the system to the get factions params
func (o *GetFactionsParams) WithSystem(system *string) *GetFactionsParams {
	o.SetSystem(system)
	return o
}

// SetSystem adds the system to the get factions params
func (o *GetFactionsParams) SetSystem(system *string) {
	o.System = system
}

// WithSystemDetails adds the systemDetails to the get factions params
func (o *GetFactionsParams) WithSystemDetails(systemDetails *bool) *GetFactionsParams {
	o.SetSystemDetails(systemDetails)
	return o
}

// SetSystemDetails adds the systemDetails to the get factions params
func (o *GetFactionsParams) SetSystemDetails(systemDetails *bool) {
	o.SystemDetails = systemDetails
}

// WithSystemID adds the systemID to the get factions params
func (o *GetFactionsParams) WithSystemID(systemID *string) *GetFactionsParams {
	o.SetSystemID(systemID)
	return o
}

// SetSystemID adds the systemId to the get factions params
func (o *GetFactionsParams) SetSystemID(systemID *string) {
	o.SystemID = systemID
}

// WithTimeMax adds the timeMax to the get factions params
func (o *GetFactionsParams) WithTimeMax(timeMax *string) *GetFactionsParams {
	o.SetTimeMax(timeMax)
	return o
}

// SetTimeMax adds the timeMax to the get factions params
func (o *GetFactionsParams) SetTimeMax(timeMax *string) {
	o.TimeMax = timeMax
}

// WithTimeMin adds the timeMin to the get factions params
func (o *GetFactionsParams) WithTimeMin(timeMin *string) *GetFactionsParams {
	o.SetTimeMin(timeMin)
	return o
}

// SetTimeMin adds the timeMin to the get factions params
func (o *GetFactionsParams) SetTimeMin(timeMin *string) {
	o.TimeMin = timeMin
}

// WriteToRequest writes these params to a swagger request
func (o *GetFactionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ActiveState != nil {

		// query param activeState
		var qrActiveState string

		if o.ActiveState != nil {
			qrActiveState = *o.ActiveState
		}
		qActiveState := qrActiveState
		if qActiveState != "" {

			if err := r.SetQueryParam("activeState", qActiveState); err != nil {
				return err
			}
		}
	}

	if o.Allegiance != nil {

		// query param allegiance
		var qrAllegiance string

		if o.Allegiance != nil {
			qrAllegiance = *o.Allegiance
		}
		qAllegiance := qrAllegiance
		if qAllegiance != "" {

			if err := r.SetQueryParam("allegiance", qAllegiance); err != nil {
				return err
			}
		}
	}

	if o.BeginsWith != nil {

		// query param beginsWith
		var qrBeginsWith string

		if o.BeginsWith != nil {
			qrBeginsWith = *o.BeginsWith
		}
		qBeginsWith := qrBeginsWith
		if qBeginsWith != "" {

			if err := r.SetQueryParam("beginsWith", qBeginsWith); err != nil {
				return err
			}
		}
	}

	if o.Count != nil {

		// query param count
		var qrCount string

		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := qrCount
		if qCount != "" {

			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}
	}

	if o.EddbID != nil {

		// query param eddbId
		var qrEddbID string

		if o.EddbID != nil {
			qrEddbID = *o.EddbID
		}
		qEddbID := qrEddbID
		if qEddbID != "" {

			if err := r.SetQueryParam("eddbId", qEddbID); err != nil {
				return err
			}
		}
	}

	if o.FilterSystemInHistory != nil {

		// query param filterSystemInHistory
		var qrFilterSystemInHistory bool

		if o.FilterSystemInHistory != nil {
			qrFilterSystemInHistory = *o.FilterSystemInHistory
		}
		qFilterSystemInHistory := swag.FormatBool(qrFilterSystemInHistory)
		if qFilterSystemInHistory != "" {

			if err := r.SetQueryParam("filterSystemInHistory", qFilterSystemInHistory); err != nil {
				return err
			}
		}
	}

	if o.Government != nil {

		// query param government
		var qrGovernment string

		if o.Government != nil {
			qrGovernment = *o.Government
		}
		qGovernment := qrGovernment
		if qGovernment != "" {

			if err := r.SetQueryParam("government", qGovernment); err != nil {
				return err
			}
		}
	}

	if o.ID != nil {

		// query param id
		var qrID string

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.InfluenceGT != nil {

		// query param influenceGT
		var qrInfluenceGT string

		if o.InfluenceGT != nil {
			qrInfluenceGT = *o.InfluenceGT
		}
		qInfluenceGT := qrInfluenceGT
		if qInfluenceGT != "" {

			if err := r.SetQueryParam("influenceGT", qInfluenceGT); err != nil {
				return err
			}
		}
	}

	if o.InfluenceLT != nil {

		// query param influenceLT
		var qrInfluenceLT string

		if o.InfluenceLT != nil {
			qrInfluenceLT = *o.InfluenceLT
		}
		qInfluenceLT := qrInfluenceLT
		if qInfluenceLT != "" {

			if err := r.SetQueryParam("influenceLT", qInfluenceLT); err != nil {
				return err
			}
		}
	}

	if o.Minimal != nil {

		// query param minimal
		var qrMinimal bool

		if o.Minimal != nil {
			qrMinimal = *o.Minimal
		}
		qMinimal := swag.FormatBool(qrMinimal)
		if qMinimal != "" {

			if err := r.SetQueryParam("minimal", qMinimal); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PendingState != nil {

		// query param pendingState
		var qrPendingState string

		if o.PendingState != nil {
			qrPendingState = *o.PendingState
		}
		qPendingState := qrPendingState
		if qPendingState != "" {

			if err := r.SetQueryParam("pendingState", qPendingState); err != nil {
				return err
			}
		}
	}

	if o.RecoveringState != nil {

		// query param recoveringState
		var qrRecoveringState string

		if o.RecoveringState != nil {
			qrRecoveringState = *o.RecoveringState
		}
		qRecoveringState := qrRecoveringState
		if qRecoveringState != "" {

			if err := r.SetQueryParam("recoveringState", qRecoveringState); err != nil {
				return err
			}
		}
	}

	if o.System != nil {

		// query param system
		var qrSystem string

		if o.System != nil {
			qrSystem = *o.System
		}
		qSystem := qrSystem
		if qSystem != "" {

			if err := r.SetQueryParam("system", qSystem); err != nil {
				return err
			}
		}
	}

	if o.SystemDetails != nil {

		// query param systemDetails
		var qrSystemDetails bool

		if o.SystemDetails != nil {
			qrSystemDetails = *o.SystemDetails
		}
		qSystemDetails := swag.FormatBool(qrSystemDetails)
		if qSystemDetails != "" {

			if err := r.SetQueryParam("systemDetails", qSystemDetails); err != nil {
				return err
			}
		}
	}

	if o.SystemID != nil {

		// query param systemId
		var qrSystemID string

		if o.SystemID != nil {
			qrSystemID = *o.SystemID
		}
		qSystemID := qrSystemID
		if qSystemID != "" {

			if err := r.SetQueryParam("systemId", qSystemID); err != nil {
				return err
			}
		}
	}

	if o.TimeMax != nil {

		// query param timeMax
		var qrTimeMax string

		if o.TimeMax != nil {
			qrTimeMax = *o.TimeMax
		}
		qTimeMax := qrTimeMax
		if qTimeMax != "" {

			if err := r.SetQueryParam("timeMax", qTimeMax); err != nil {
				return err
			}
		}
	}

	if o.TimeMin != nil {

		// query param timeMin
		var qrTimeMin string

		if o.TimeMin != nil {
			qrTimeMin = *o.TimeMin
		}
		qTimeMin := qrTimeMin
		if qTimeMin != "" {

			if err := r.SetQueryParam("timeMin", qTimeMin); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
