// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetFactions(params *GetFactionsParams, opts ...ClientOption) (*GetFactionsOK, error)

	GetStations(params *GetStationsParams, opts ...ClientOption) (*GetStationsOK, error)

	GetSystems(params *GetSystemsParams, opts ...ClientOption) (*GetSystemsOK, error)

	GetTicks(params *GetTicksParams, opts ...ClientOption) (*GetTicksOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetFactions Get the Factions
*/
func (a *Client) GetFactions(params *GetFactionsParams, opts ...ClientOption) (*GetFactionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFactionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetFactions",
		Method:             "GET",
		PathPattern:        "/factions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFactionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFactionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetFactions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStations Get the Stations
*/
func (a *Client) GetStations(params *GetStationsParams, opts ...ClientOption) (*GetStationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetStations",
		Method:             "GET",
		PathPattern:        "/stations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetStations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSystems Get the Systems
*/
func (a *Client) GetSystems(params *GetSystemsParams, opts ...ClientOption) (*GetSystemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSystems",
		Method:             "GET",
		PathPattern:        "/systems",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSystemsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSystemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSystems: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTicks Get the last tick time and tick history
*/
func (a *Client) GetTicks(params *GetTicksParams, opts ...ClientOption) (*GetTicksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTicksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTicks",
		Method:             "GET",
		PathPattern:        "/ticks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTicksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTicksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTicks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
