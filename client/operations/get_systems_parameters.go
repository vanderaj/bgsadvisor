// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetSystemsParams creates a new GetSystemsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetSystemsParams() *GetSystemsParams {
	return &GetSystemsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetSystemsParamsWithTimeout creates a new GetSystemsParams object
// with the ability to set a timeout on a request.
func NewGetSystemsParamsWithTimeout(timeout time.Duration) *GetSystemsParams {
	return &GetSystemsParams{
		timeout: timeout,
	}
}

// NewGetSystemsParamsWithContext creates a new GetSystemsParams object
// with the ability to set a context for a request.
func NewGetSystemsParamsWithContext(ctx context.Context) *GetSystemsParams {
	return &GetSystemsParams{
		Context: ctx,
	}
}

// NewGetSystemsParamsWithHTTPClient creates a new GetSystemsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetSystemsParamsWithHTTPClient(client *http.Client) *GetSystemsParams {
	return &GetSystemsParams{
		HTTPClient: client,
	}
}

/* GetSystemsParams contains all the parameters to send to the API endpoint
   for the get systems operation.

   Typically these are written to a http.Request.
*/
type GetSystemsParams struct {

	/* ActiveState.

	   (slow) Name of the active state of any faction in the system.
	*/
	ActiveState *string

	/* Allegiance.

	   Name of the allegiance.
	*/
	Allegiance *string

	/* BeginsWith.

	   Starting characters of the system.
	*/
	BeginsWith *string

	/* Count.

	   Number of history records. Disables timeMin and timeMax
	*/
	Count *string

	/* EddbID.

	   EDDB ID of the system.
	*/
	EddbID *string

	/* Faction.

	   The faction present in the system.
	*/
	Faction *string

	/* FactionAllegiance.

	   (slow) Faction present with allegiance.
	*/
	FactionAllegiance *string

	/* FactionControl.

	   The faction is in control present in the system.
	*/
	FactionControl *bool

	/* FactionDetails.

	   Get the detailed faction data of the factions in the system.
	*/
	FactionDetails *bool

	/* FactionGovernment.

	   (slow) Faction present with government.
	*/
	FactionGovernment *string

	/* FactionHistory.

	   Get the history of the factions along with the system history.
	*/
	FactionHistory *bool

	/* FactionID.

	   The id of the faction present in the system.
	*/
	FactionID *string

	/* Government.

	   Name of the government type.
	*/
	Government *string

	/* ID.

	   ID of the document.
	*/
	ID *string

	/* InfluenceGT.

	   (slow) Faction present with influence greater than. Must be between 0 and 1.
	*/
	InfluenceGT *string

	/* InfluenceLT.

	   (slow) Faction present with influence lesser than. Must be between 0 and 1.
	*/
	InfluenceLT *string

	/* Minimal.

	   Get minimal data of the system.
	*/
	Minimal *bool

	/* Name.

	   System name.
	*/
	Name *string

	/* Page.

	   Page no of response.
	*/
	Page *int64

	/* PendingState.

	   (slow) Name of the pending state of any faction in the system.
	*/
	PendingState *string

	/* PrimaryEconomy.

	   The primary economy of the system.
	*/
	PrimaryEconomy *string

	/* RecoveringState.

	   (slow) Name of the recovering state of any faction in the system.
	*/
	RecoveringState *string

	/* ReferenceDistance.

	   The distance from the system centred around which the search should be made.
	*/
	ReferenceDistance *string

	/* ReferenceDistanceMin.

	   The minimum distance from the system centred around which the search should be made.
	*/
	ReferenceDistanceMin *string

	/* ReferenceSystem.

	   The system centred around which the search should be made.
	*/
	ReferenceSystem *string

	/* ReferenceSystemID.

	   The system id centred around which the search should be made.
	*/
	ReferenceSystemID *string

	/* SecondaryEconomy.

	   The secondary economy of the system.
	*/
	SecondaryEconomy *string

	/* Security.

	   The name of the security status in the system.
	*/
	Security *string

	/* Sphere.

	   (slow) Search by sphere instead of cube.
	*/
	Sphere *bool

	/* State.

	   State the system is in.
	*/
	State *string

	/* TimeMax.

	   Maximum time for the system history in milliseconds.
	*/
	TimeMax *string

	/* TimeMin.

	   Minimum time for the system history in milliseconds.
	*/
	TimeMin *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get systems params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSystemsParams) WithDefaults() *GetSystemsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get systems params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSystemsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get systems params
func (o *GetSystemsParams) WithTimeout(timeout time.Duration) *GetSystemsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get systems params
func (o *GetSystemsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get systems params
func (o *GetSystemsParams) WithContext(ctx context.Context) *GetSystemsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get systems params
func (o *GetSystemsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get systems params
func (o *GetSystemsParams) WithHTTPClient(client *http.Client) *GetSystemsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get systems params
func (o *GetSystemsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActiveState adds the activeState to the get systems params
func (o *GetSystemsParams) WithActiveState(activeState *string) *GetSystemsParams {
	o.SetActiveState(activeState)
	return o
}

// SetActiveState adds the activeState to the get systems params
func (o *GetSystemsParams) SetActiveState(activeState *string) {
	o.ActiveState = activeState
}

// WithAllegiance adds the allegiance to the get systems params
func (o *GetSystemsParams) WithAllegiance(allegiance *string) *GetSystemsParams {
	o.SetAllegiance(allegiance)
	return o
}

// SetAllegiance adds the allegiance to the get systems params
func (o *GetSystemsParams) SetAllegiance(allegiance *string) {
	o.Allegiance = allegiance
}

// WithBeginsWith adds the beginsWith to the get systems params
func (o *GetSystemsParams) WithBeginsWith(beginsWith *string) *GetSystemsParams {
	o.SetBeginsWith(beginsWith)
	return o
}

// SetBeginsWith adds the beginsWith to the get systems params
func (o *GetSystemsParams) SetBeginsWith(beginsWith *string) {
	o.BeginsWith = beginsWith
}

// WithCount adds the count to the get systems params
func (o *GetSystemsParams) WithCount(count *string) *GetSystemsParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get systems params
func (o *GetSystemsParams) SetCount(count *string) {
	o.Count = count
}

// WithEddbID adds the eddbID to the get systems params
func (o *GetSystemsParams) WithEddbID(eddbID *string) *GetSystemsParams {
	o.SetEddbID(eddbID)
	return o
}

// SetEddbID adds the eddbId to the get systems params
func (o *GetSystemsParams) SetEddbID(eddbID *string) {
	o.EddbID = eddbID
}

// WithFaction adds the faction to the get systems params
func (o *GetSystemsParams) WithFaction(faction *string) *GetSystemsParams {
	o.SetFaction(faction)
	return o
}

// SetFaction adds the faction to the get systems params
func (o *GetSystemsParams) SetFaction(faction *string) {
	o.Faction = faction
}

// WithFactionAllegiance adds the factionAllegiance to the get systems params
func (o *GetSystemsParams) WithFactionAllegiance(factionAllegiance *string) *GetSystemsParams {
	o.SetFactionAllegiance(factionAllegiance)
	return o
}

// SetFactionAllegiance adds the factionAllegiance to the get systems params
func (o *GetSystemsParams) SetFactionAllegiance(factionAllegiance *string) {
	o.FactionAllegiance = factionAllegiance
}

// WithFactionControl adds the factionControl to the get systems params
func (o *GetSystemsParams) WithFactionControl(factionControl *bool) *GetSystemsParams {
	o.SetFactionControl(factionControl)
	return o
}

// SetFactionControl adds the factionControl to the get systems params
func (o *GetSystemsParams) SetFactionControl(factionControl *bool) {
	o.FactionControl = factionControl
}

// WithFactionDetails adds the factionDetails to the get systems params
func (o *GetSystemsParams) WithFactionDetails(factionDetails *bool) *GetSystemsParams {
	o.SetFactionDetails(factionDetails)
	return o
}

// SetFactionDetails adds the factionDetails to the get systems params
func (o *GetSystemsParams) SetFactionDetails(factionDetails *bool) {
	o.FactionDetails = factionDetails
}

// WithFactionGovernment adds the factionGovernment to the get systems params
func (o *GetSystemsParams) WithFactionGovernment(factionGovernment *string) *GetSystemsParams {
	o.SetFactionGovernment(factionGovernment)
	return o
}

// SetFactionGovernment adds the factionGovernment to the get systems params
func (o *GetSystemsParams) SetFactionGovernment(factionGovernment *string) {
	o.FactionGovernment = factionGovernment
}

// WithFactionHistory adds the factionHistory to the get systems params
func (o *GetSystemsParams) WithFactionHistory(factionHistory *bool) *GetSystemsParams {
	o.SetFactionHistory(factionHistory)
	return o
}

// SetFactionHistory adds the factionHistory to the get systems params
func (o *GetSystemsParams) SetFactionHistory(factionHistory *bool) {
	o.FactionHistory = factionHistory
}

// WithFactionID adds the factionID to the get systems params
func (o *GetSystemsParams) WithFactionID(factionID *string) *GetSystemsParams {
	o.SetFactionID(factionID)
	return o
}

// SetFactionID adds the factionId to the get systems params
func (o *GetSystemsParams) SetFactionID(factionID *string) {
	o.FactionID = factionID
}

// WithGovernment adds the government to the get systems params
func (o *GetSystemsParams) WithGovernment(government *string) *GetSystemsParams {
	o.SetGovernment(government)
	return o
}

// SetGovernment adds the government to the get systems params
func (o *GetSystemsParams) SetGovernment(government *string) {
	o.Government = government
}

// WithID adds the id to the get systems params
func (o *GetSystemsParams) WithID(id *string) *GetSystemsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get systems params
func (o *GetSystemsParams) SetID(id *string) {
	o.ID = id
}

// WithInfluenceGT adds the influenceGT to the get systems params
func (o *GetSystemsParams) WithInfluenceGT(influenceGT *string) *GetSystemsParams {
	o.SetInfluenceGT(influenceGT)
	return o
}

// SetInfluenceGT adds the influenceGT to the get systems params
func (o *GetSystemsParams) SetInfluenceGT(influenceGT *string) {
	o.InfluenceGT = influenceGT
}

// WithInfluenceLT adds the influenceLT to the get systems params
func (o *GetSystemsParams) WithInfluenceLT(influenceLT *string) *GetSystemsParams {
	o.SetInfluenceLT(influenceLT)
	return o
}

// SetInfluenceLT adds the influenceLT to the get systems params
func (o *GetSystemsParams) SetInfluenceLT(influenceLT *string) {
	o.InfluenceLT = influenceLT
}

// WithMinimal adds the minimal to the get systems params
func (o *GetSystemsParams) WithMinimal(minimal *bool) *GetSystemsParams {
	o.SetMinimal(minimal)
	return o
}

// SetMinimal adds the minimal to the get systems params
func (o *GetSystemsParams) SetMinimal(minimal *bool) {
	o.Minimal = minimal
}

// WithName adds the name to the get systems params
func (o *GetSystemsParams) WithName(name *string) *GetSystemsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get systems params
func (o *GetSystemsParams) SetName(name *string) {
	o.Name = name
}

// WithPage adds the page to the get systems params
func (o *GetSystemsParams) WithPage(page *int64) *GetSystemsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get systems params
func (o *GetSystemsParams) SetPage(page *int64) {
	o.Page = page
}

// WithPendingState adds the pendingState to the get systems params
func (o *GetSystemsParams) WithPendingState(pendingState *string) *GetSystemsParams {
	o.SetPendingState(pendingState)
	return o
}

// SetPendingState adds the pendingState to the get systems params
func (o *GetSystemsParams) SetPendingState(pendingState *string) {
	o.PendingState = pendingState
}

// WithPrimaryEconomy adds the primaryEconomy to the get systems params
func (o *GetSystemsParams) WithPrimaryEconomy(primaryEconomy *string) *GetSystemsParams {
	o.SetPrimaryEconomy(primaryEconomy)
	return o
}

// SetPrimaryEconomy adds the primaryEconomy to the get systems params
func (o *GetSystemsParams) SetPrimaryEconomy(primaryEconomy *string) {
	o.PrimaryEconomy = primaryEconomy
}

// WithRecoveringState adds the recoveringState to the get systems params
func (o *GetSystemsParams) WithRecoveringState(recoveringState *string) *GetSystemsParams {
	o.SetRecoveringState(recoveringState)
	return o
}

// SetRecoveringState adds the recoveringState to the get systems params
func (o *GetSystemsParams) SetRecoveringState(recoveringState *string) {
	o.RecoveringState = recoveringState
}

// WithReferenceDistance adds the referenceDistance to the get systems params
func (o *GetSystemsParams) WithReferenceDistance(referenceDistance *string) *GetSystemsParams {
	o.SetReferenceDistance(referenceDistance)
	return o
}

// SetReferenceDistance adds the referenceDistance to the get systems params
func (o *GetSystemsParams) SetReferenceDistance(referenceDistance *string) {
	o.ReferenceDistance = referenceDistance
}

// WithReferenceDistanceMin adds the referenceDistanceMin to the get systems params
func (o *GetSystemsParams) WithReferenceDistanceMin(referenceDistanceMin *string) *GetSystemsParams {
	o.SetReferenceDistanceMin(referenceDistanceMin)
	return o
}

// SetReferenceDistanceMin adds the referenceDistanceMin to the get systems params
func (o *GetSystemsParams) SetReferenceDistanceMin(referenceDistanceMin *string) {
	o.ReferenceDistanceMin = referenceDistanceMin
}

// WithReferenceSystem adds the referenceSystem to the get systems params
func (o *GetSystemsParams) WithReferenceSystem(referenceSystem *string) *GetSystemsParams {
	o.SetReferenceSystem(referenceSystem)
	return o
}

// SetReferenceSystem adds the referenceSystem to the get systems params
func (o *GetSystemsParams) SetReferenceSystem(referenceSystem *string) {
	o.ReferenceSystem = referenceSystem
}

// WithReferenceSystemID adds the referenceSystemID to the get systems params
func (o *GetSystemsParams) WithReferenceSystemID(referenceSystemID *string) *GetSystemsParams {
	o.SetReferenceSystemID(referenceSystemID)
	return o
}

// SetReferenceSystemID adds the referenceSystemId to the get systems params
func (o *GetSystemsParams) SetReferenceSystemID(referenceSystemID *string) {
	o.ReferenceSystemID = referenceSystemID
}

// WithSecondaryEconomy adds the secondaryEconomy to the get systems params
func (o *GetSystemsParams) WithSecondaryEconomy(secondaryEconomy *string) *GetSystemsParams {
	o.SetSecondaryEconomy(secondaryEconomy)
	return o
}

// SetSecondaryEconomy adds the secondaryEconomy to the get systems params
func (o *GetSystemsParams) SetSecondaryEconomy(secondaryEconomy *string) {
	o.SecondaryEconomy = secondaryEconomy
}

// WithSecurity adds the security to the get systems params
func (o *GetSystemsParams) WithSecurity(security *string) *GetSystemsParams {
	o.SetSecurity(security)
	return o
}

// SetSecurity adds the security to the get systems params
func (o *GetSystemsParams) SetSecurity(security *string) {
	o.Security = security
}

// WithSphere adds the sphere to the get systems params
func (o *GetSystemsParams) WithSphere(sphere *bool) *GetSystemsParams {
	o.SetSphere(sphere)
	return o
}

// SetSphere adds the sphere to the get systems params
func (o *GetSystemsParams) SetSphere(sphere *bool) {
	o.Sphere = sphere
}

// WithState adds the state to the get systems params
func (o *GetSystemsParams) WithState(state *string) *GetSystemsParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the get systems params
func (o *GetSystemsParams) SetState(state *string) {
	o.State = state
}

// WithTimeMax adds the timeMax to the get systems params
func (o *GetSystemsParams) WithTimeMax(timeMax *string) *GetSystemsParams {
	o.SetTimeMax(timeMax)
	return o
}

// SetTimeMax adds the timeMax to the get systems params
func (o *GetSystemsParams) SetTimeMax(timeMax *string) {
	o.TimeMax = timeMax
}

// WithTimeMin adds the timeMin to the get systems params
func (o *GetSystemsParams) WithTimeMin(timeMin *string) *GetSystemsParams {
	o.SetTimeMin(timeMin)
	return o
}

// SetTimeMin adds the timeMin to the get systems params
func (o *GetSystemsParams) SetTimeMin(timeMin *string) {
	o.TimeMin = timeMin
}

// WriteToRequest writes these params to a swagger request
func (o *GetSystemsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ActiveState != nil {

		// query param activeState
		var qrActiveState string

		if o.ActiveState != nil {
			qrActiveState = *o.ActiveState
		}
		qActiveState := qrActiveState
		if qActiveState != "" {

			if err := r.SetQueryParam("activeState", qActiveState); err != nil {
				return err
			}
		}
	}

	if o.Allegiance != nil {

		// query param allegiance
		var qrAllegiance string

		if o.Allegiance != nil {
			qrAllegiance = *o.Allegiance
		}
		qAllegiance := qrAllegiance
		if qAllegiance != "" {

			if err := r.SetQueryParam("allegiance", qAllegiance); err != nil {
				return err
			}
		}
	}

	if o.BeginsWith != nil {

		// query param beginsWith
		var qrBeginsWith string

		if o.BeginsWith != nil {
			qrBeginsWith = *o.BeginsWith
		}
		qBeginsWith := qrBeginsWith
		if qBeginsWith != "" {

			if err := r.SetQueryParam("beginsWith", qBeginsWith); err != nil {
				return err
			}
		}
	}

	if o.Count != nil {

		// query param count
		var qrCount string

		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := qrCount
		if qCount != "" {

			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}
	}

	if o.EddbID != nil {

		// query param eddbId
		var qrEddbID string

		if o.EddbID != nil {
			qrEddbID = *o.EddbID
		}
		qEddbID := qrEddbID
		if qEddbID != "" {

			if err := r.SetQueryParam("eddbId", qEddbID); err != nil {
				return err
			}
		}
	}

	if o.Faction != nil {

		// query param faction
		var qrFaction string

		if o.Faction != nil {
			qrFaction = *o.Faction
		}
		qFaction := qrFaction
		if qFaction != "" {

			if err := r.SetQueryParam("faction", qFaction); err != nil {
				return err
			}
		}
	}

	if o.FactionAllegiance != nil {

		// query param factionAllegiance
		var qrFactionAllegiance string

		if o.FactionAllegiance != nil {
			qrFactionAllegiance = *o.FactionAllegiance
		}
		qFactionAllegiance := qrFactionAllegiance
		if qFactionAllegiance != "" {

			if err := r.SetQueryParam("factionAllegiance", qFactionAllegiance); err != nil {
				return err
			}
		}
	}

	if o.FactionControl != nil {

		// query param factionControl
		var qrFactionControl bool

		if o.FactionControl != nil {
			qrFactionControl = *o.FactionControl
		}
		qFactionControl := swag.FormatBool(qrFactionControl)
		if qFactionControl != "" {

			if err := r.SetQueryParam("factionControl", qFactionControl); err != nil {
				return err
			}
		}
	}

	if o.FactionDetails != nil {

		// query param factionDetails
		var qrFactionDetails bool

		if o.FactionDetails != nil {
			qrFactionDetails = *o.FactionDetails
		}
		qFactionDetails := swag.FormatBool(qrFactionDetails)
		if qFactionDetails != "" {

			if err := r.SetQueryParam("factionDetails", qFactionDetails); err != nil {
				return err
			}
		}
	}

	if o.FactionGovernment != nil {

		// query param factionGovernment
		var qrFactionGovernment string

		if o.FactionGovernment != nil {
			qrFactionGovernment = *o.FactionGovernment
		}
		qFactionGovernment := qrFactionGovernment
		if qFactionGovernment != "" {

			if err := r.SetQueryParam("factionGovernment", qFactionGovernment); err != nil {
				return err
			}
		}
	}

	if o.FactionHistory != nil {

		// query param factionHistory
		var qrFactionHistory bool

		if o.FactionHistory != nil {
			qrFactionHistory = *o.FactionHistory
		}
		qFactionHistory := swag.FormatBool(qrFactionHistory)
		if qFactionHistory != "" {

			if err := r.SetQueryParam("factionHistory", qFactionHistory); err != nil {
				return err
			}
		}
	}

	if o.FactionID != nil {

		// query param factionId
		var qrFactionID string

		if o.FactionID != nil {
			qrFactionID = *o.FactionID
		}
		qFactionID := qrFactionID
		if qFactionID != "" {

			if err := r.SetQueryParam("factionId", qFactionID); err != nil {
				return err
			}
		}
	}

	if o.Government != nil {

		// query param government
		var qrGovernment string

		if o.Government != nil {
			qrGovernment = *o.Government
		}
		qGovernment := qrGovernment
		if qGovernment != "" {

			if err := r.SetQueryParam("government", qGovernment); err != nil {
				return err
			}
		}
	}

	if o.ID != nil {

		// query param id
		var qrID string

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.InfluenceGT != nil {

		// query param influenceGT
		var qrInfluenceGT string

		if o.InfluenceGT != nil {
			qrInfluenceGT = *o.InfluenceGT
		}
		qInfluenceGT := qrInfluenceGT
		if qInfluenceGT != "" {

			if err := r.SetQueryParam("influenceGT", qInfluenceGT); err != nil {
				return err
			}
		}
	}

	if o.InfluenceLT != nil {

		// query param influenceLT
		var qrInfluenceLT string

		if o.InfluenceLT != nil {
			qrInfluenceLT = *o.InfluenceLT
		}
		qInfluenceLT := qrInfluenceLT
		if qInfluenceLT != "" {

			if err := r.SetQueryParam("influenceLT", qInfluenceLT); err != nil {
				return err
			}
		}
	}

	if o.Minimal != nil {

		// query param minimal
		var qrMinimal bool

		if o.Minimal != nil {
			qrMinimal = *o.Minimal
		}
		qMinimal := swag.FormatBool(qrMinimal)
		if qMinimal != "" {

			if err := r.SetQueryParam("minimal", qMinimal); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PendingState != nil {

		// query param pendingState
		var qrPendingState string

		if o.PendingState != nil {
			qrPendingState = *o.PendingState
		}
		qPendingState := qrPendingState
		if qPendingState != "" {

			if err := r.SetQueryParam("pendingState", qPendingState); err != nil {
				return err
			}
		}
	}

	if o.PrimaryEconomy != nil {

		// query param primaryEconomy
		var qrPrimaryEconomy string

		if o.PrimaryEconomy != nil {
			qrPrimaryEconomy = *o.PrimaryEconomy
		}
		qPrimaryEconomy := qrPrimaryEconomy
		if qPrimaryEconomy != "" {

			if err := r.SetQueryParam("primaryEconomy", qPrimaryEconomy); err != nil {
				return err
			}
		}
	}

	if o.RecoveringState != nil {

		// query param recoveringState
		var qrRecoveringState string

		if o.RecoveringState != nil {
			qrRecoveringState = *o.RecoveringState
		}
		qRecoveringState := qrRecoveringState
		if qRecoveringState != "" {

			if err := r.SetQueryParam("recoveringState", qRecoveringState); err != nil {
				return err
			}
		}
	}

	if o.ReferenceDistance != nil {

		// query param referenceDistance
		var qrReferenceDistance string

		if o.ReferenceDistance != nil {
			qrReferenceDistance = *o.ReferenceDistance
		}
		qReferenceDistance := qrReferenceDistance
		if qReferenceDistance != "" {

			if err := r.SetQueryParam("referenceDistance", qReferenceDistance); err != nil {
				return err
			}
		}
	}

	if o.ReferenceDistanceMin != nil {

		// query param referenceDistanceMin
		var qrReferenceDistanceMin string

		if o.ReferenceDistanceMin != nil {
			qrReferenceDistanceMin = *o.ReferenceDistanceMin
		}
		qReferenceDistanceMin := qrReferenceDistanceMin
		if qReferenceDistanceMin != "" {

			if err := r.SetQueryParam("referenceDistanceMin", qReferenceDistanceMin); err != nil {
				return err
			}
		}
	}

	if o.ReferenceSystem != nil {

		// query param referenceSystem
		var qrReferenceSystem string

		if o.ReferenceSystem != nil {
			qrReferenceSystem = *o.ReferenceSystem
		}
		qReferenceSystem := qrReferenceSystem
		if qReferenceSystem != "" {

			if err := r.SetQueryParam("referenceSystem", qReferenceSystem); err != nil {
				return err
			}
		}
	}

	if o.ReferenceSystemID != nil {

		// query param referenceSystemId
		var qrReferenceSystemID string

		if o.ReferenceSystemID != nil {
			qrReferenceSystemID = *o.ReferenceSystemID
		}
		qReferenceSystemID := qrReferenceSystemID
		if qReferenceSystemID != "" {

			if err := r.SetQueryParam("referenceSystemId", qReferenceSystemID); err != nil {
				return err
			}
		}
	}

	if o.SecondaryEconomy != nil {

		// query param secondaryEconomy
		var qrSecondaryEconomy string

		if o.SecondaryEconomy != nil {
			qrSecondaryEconomy = *o.SecondaryEconomy
		}
		qSecondaryEconomy := qrSecondaryEconomy
		if qSecondaryEconomy != "" {

			if err := r.SetQueryParam("secondaryEconomy", qSecondaryEconomy); err != nil {
				return err
			}
		}
	}

	if o.Security != nil {

		// query param security
		var qrSecurity string

		if o.Security != nil {
			qrSecurity = *o.Security
		}
		qSecurity := qrSecurity
		if qSecurity != "" {

			if err := r.SetQueryParam("security", qSecurity); err != nil {
				return err
			}
		}
	}

	if o.Sphere != nil {

		// query param sphere
		var qrSphere bool

		if o.Sphere != nil {
			qrSphere = *o.Sphere
		}
		qSphere := swag.FormatBool(qrSphere)
		if qSphere != "" {

			if err := r.SetQueryParam("sphere", qSphere); err != nil {
				return err
			}
		}
	}

	if o.State != nil {

		// query param state
		var qrState string

		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.TimeMax != nil {

		// query param timeMax
		var qrTimeMax string

		if o.TimeMax != nil {
			qrTimeMax = *o.TimeMax
		}
		qTimeMax := qrTimeMax
		if qTimeMax != "" {

			if err := r.SetQueryParam("timeMax", qTimeMax); err != nil {
				return err
			}
		}
	}

	if o.TimeMin != nil {

		// query param timeMin
		var qrTimeMin string

		if o.TimeMin != nil {
			qrTimeMin = *o.TimeMin
		}
		qTimeMin := qrTimeMin
		if qTimeMin != "" {

			if err := r.SetQueryParam("timeMin", qTimeMin); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
